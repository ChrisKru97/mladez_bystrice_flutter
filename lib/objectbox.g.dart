// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'classes/config.dart';
import 'classes/history_entry.dart';
import 'classes/song.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 21566325948268200),
      name: 'Song',
      lastPropertyId: const IdUid(7, 5269593133275934922),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1683991251483824942),
            name: 'number',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 2472020150473241357),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2707697139073033076),
            name: 'withChords',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1593584481066196681),
            name: 'withoutChords',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8082952043737177739),
            name: 'isFavorite',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 401639409747075566),
            name: 'searchValue',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5269593133275934922),
            name: 'fontSize',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 3495550992937678796),
      name: 'Config',
      lastPropertyId: const IdUid(8, 5023599416128962234),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8178687981845784317),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 6347244712601304956),
            name: 'showChords',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4192046020383750383),
            name: 'alignCenter',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4883858607844163198),
            name: 'lastFirestoreFetch',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5023599416128962234),
            name: 'migrated',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 6002352585571872981),
      name: 'HistoryEntry',
      lastPropertyId: const IdUid(3, 4211662902501483840),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4518092743000556433),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8864092660862178935),
            name: 'songNumber',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4211662902501483840),
            name: 'openedAt',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 6002352585571872981),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        4012068740722755901,
        5052117610935616042,
        6069906534708667740
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Song: EntityDefinition<Song>(
        model: _entities[0],
        toOneRelations: (Song object) => [],
        toManyRelations: (Song object) => {},
        getId: (Song object) => object.number,
        setId: (Song object, int id) {
          object.number = id;
        },
        objectToFB: (Song object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final withChordsOffset = fbb.writeString(object.withChords);
          final withoutChordsOffset = fbb.writeString(object.withoutChords);
          final searchValueOffset = fbb.writeString(object.searchValue);
          fbb.startTable(8);
          fbb.addInt64(0, object.number);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, withChordsOffset);
          fbb.addOffset(3, withoutChordsOffset);
          fbb.addBool(4, object.isFavorite);
          fbb.addOffset(5, searchValueOffset);
          fbb.addFloat64(6, object.fontSize);
          fbb.finish(fbb.endTable());
          return object.number;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final numberParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final withChordsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final withoutChordsParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final searchValueParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final isFavoriteParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final fontSizeParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final object = Song(
              number: numberParam,
              name: nameParam,
              withChords: withChordsParam,
              withoutChords: withoutChordsParam,
              searchValue: searchValueParam,
              isFavorite: isFavoriteParam,
              fontSize: fontSizeParam);

          return object;
        }),
    Config: EntityDefinition<Config>(
        model: _entities[1],
        toOneRelations: (Config object) => [],
        toManyRelations: (Config object) => {},
        getId: (Config object) => object.id,
        setId: (Config object, int id) {
          object.id = id;
        },
        objectToFB: (Config object, fb.Builder fbb) {
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.showChords);
          fbb.addBool(3, object.alignCenter);
          fbb.addInt64(4, object.lastFirestoreFetch?.millisecondsSinceEpoch);
          fbb.addBool(7, object.migrated);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final lastFirestoreFetchValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final showChordsParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false);
          final alignCenterParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final migratedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final lastFirestoreFetchParam = lastFirestoreFetchValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(lastFirestoreFetchValue);
          final object = Config(
              id: idParam,
              showChords: showChordsParam,
              alignCenter: alignCenterParam,
              migrated: migratedParam,
              lastFirestoreFetch: lastFirestoreFetchParam);

          return object;
        }),
    HistoryEntry: EntityDefinition<HistoryEntry>(
        model: _entities[2],
        toOneRelations: (HistoryEntry object) => [],
        toManyRelations: (HistoryEntry object) => {},
        getId: (HistoryEntry object) => object.id,
        setId: (HistoryEntry object, int id) {
          object.id = id;
        },
        objectToFB: (HistoryEntry object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.songNumber);
          fbb.addInt64(2, object.openedAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final openedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final songNumberParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final object = HistoryEntry(
              id: idParam,
              openedAt: openedAtParam,
              songNumber: songNumberParam);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Song] entity fields to define ObjectBox queries.
class Song_ {
  /// see [Song.number]
  static final number = QueryIntegerProperty<Song>(_entities[0].properties[0]);

  /// see [Song.name]
  static final name = QueryStringProperty<Song>(_entities[0].properties[1]);

  /// see [Song.withChords]
  static final withChords =
      QueryStringProperty<Song>(_entities[0].properties[2]);

  /// see [Song.withoutChords]
  static final withoutChords =
      QueryStringProperty<Song>(_entities[0].properties[3]);

  /// see [Song.isFavorite]
  static final isFavorite =
      QueryBooleanProperty<Song>(_entities[0].properties[4]);

  /// see [Song.searchValue]
  static final searchValue =
      QueryStringProperty<Song>(_entities[0].properties[5]);

  /// see [Song.fontSize]
  static final fontSize = QueryDoubleProperty<Song>(_entities[0].properties[6]);
}

/// [Config] entity fields to define ObjectBox queries.
class Config_ {
  /// see [Config.id]
  static final id = QueryIntegerProperty<Config>(_entities[1].properties[0]);

  /// see [Config.showChords]
  static final showChords =
      QueryBooleanProperty<Config>(_entities[1].properties[1]);

  /// see [Config.alignCenter]
  static final alignCenter =
      QueryBooleanProperty<Config>(_entities[1].properties[2]);

  /// see [Config.lastFirestoreFetch]
  static final lastFirestoreFetch =
      QueryIntegerProperty<Config>(_entities[1].properties[3]);

  /// see [Config.migrated]
  static final migrated =
      QueryBooleanProperty<Config>(_entities[1].properties[4]);
}

/// [HistoryEntry] entity fields to define ObjectBox queries.
class HistoryEntry_ {
  /// see [HistoryEntry.id]
  static final id =
      QueryIntegerProperty<HistoryEntry>(_entities[2].properties[0]);

  /// see [HistoryEntry.songNumber]
  static final songNumber =
      QueryIntegerProperty<HistoryEntry>(_entities[2].properties[1]);

  /// see [HistoryEntry.openedAt]
  static final openedAt =
      QueryIntegerProperty<HistoryEntry>(_entities[2].properties[2]);
}
